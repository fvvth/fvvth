#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Aug 29 17:57:16 2019
Project "Pathos"
@author: fcollins
"""

import sys
import time
import os 
import csv
import colorsys
import pandas as pd
import numpy as np
import math 
import psychopy 
import matplotlib
matplotlib.use("Agg")
from psychopy import event, core, logging, visual, data, gui
from psychopy.core import getTime
import pygame
from pygame.locals import *

from psychopy import locale_setup, sound, gui, visual, core, data, event, logging, clock
from psychopy.constants import (NOT_STARTED, STARTED, PLAYING, PAUSED, STOPPED,
                                FINISHED, PRESSED, RELEASED, FOREVER)
from numpy import (sin, cos, tan, log, log10, pi, average, 
                   sqrt, std, deg2rad, rad2deg, linspace, asarray)

surveyName = "Survey Information"
surveyInfo = {'id': ''}  #This is is called below and is needed for starting the GUI
dlg = gui.DlgFromDict(dictionary = surveyInfo, title = surveyName) #creat the GUI
if dlg.OK == False:
    core.quit() # user pressed cancel
surveyInfo['surveyName'] = surveyName  

subject_id = surveyInfo['id']
win = visual.Window(size =[800, 600], fullscr = False)

file_name = "BFAS_Self_Survey" + str(subject_id) + ".csv"
BFAS_Self_Survey = pd.read_csv('BFAS_Self_Survey.csv') 

win.flip()
message = visual.TextStim(win, text = 'press spacebar to begin')
message.setAutoDraw(True)
win.flip()
event.waitKeys(keyList='space')
message.setText('')
win.flip()

instruct = "Here are a number of characteristics that may or may not describe you./nFor example, do you agree that you seldom feel blue, compared to most other people? /nPlease fill in the number that best indicates the extent to which you agree or disagree with each statement listed below. /nBe as honest as possible, but rely on your initial feeling and do not think too much about each item."

instructions = visual.TextStim(win, text = instruct, 
                               units = 'norm')

sp_text = visual.TextStim(win, text = "pres the spacebar to continue",
                          height = .06, units = 'norm',
                          pos = (0.0, -0.7))
instructions.draw()
sp_text.draw()
win.flip()
event.waitKeys(keyList = 'space') #keyList tells the program which key press makes the 
win.flip()                        #program continue. if keylist is not present it will continue on any button press 

message = visual.TextStim(win, text = "You will now be presented with a number of characteristics.")

message.draw()
sp_text.draw()
win.flip()
event.waitKeys(keyList = 'space')
# takes the message draws it, takes the sp_text draws it and then winflip makes it show on the screen
nTrials = BFAS_Self_Survey.shape[0] #returns the amount of rows in my data frame 

#set up empty arrays of variables
ids = []
bfasChar = []
bfasCharNum = []
bfasResponses = []
bfasResponseTime = []
bfasAggregate = []

#start the trial loop
for n in range(0, nTrials):
     question = BFAS_Self_Survey.loc[n, 'Characteristic']
     charNum = BFAS_Self_Survey.loc[n, 'CharNum']
     response = BFAS_Self_Survey.loc[n, 'Response']
     responseTime = BFAS_Self_Survey.loc[n, 'Response_Time']
     aggregateScore = BFAS_Self_Survey.loc[n, 'Aggregate_Score']
     
     s1 = visual.TextStim(win, text= 'Strongly Disagree', height=.04, units='norm', pos =(-0.5, -0.45))
     s2 = visual.TextStim(win, text= 'Slightly Disagree', height=.04, units='norm', pos = (-0.2, -0.45))
     s3 = visual.TextStim(win, text= 'Neither Agree/nNorDisagree', height=.04, units='norm', pos = (0.2, -0.45))
     s4 = visual.TextStim(win, text= 'Slightly Agree', height=.04, units='norm', pos = (0.5, -0.45))
     s5 = visual.TextStim(win, text= 'Strongly Agree', height=.04, units='norm', pos = (0.5, -0.45))
     
     q_scale = visual.RatingScale(win, low = 1, high = 5, neutral = 3, scale = False, labels = False, singleClick = True)
     
     q = visual.TextStim(win, text=question, height=.10, units='norm')
     
     while q_scale.noResponse: # show & update until a response has been made
        q.draw()
        s1.draw()
        s2.draw()
        s3.draw()
        s4.draw()
        s5.draw()
        q_scale.draw()
        win.flip()
        
     bfasResponse = q_scale.getRating()
     bfasResponseTime = q_scale.getRT()
        
     ids.append(subject_id)
     bfasChar.append(question)
     bfasCharNum.append(charNum) 
     bfasResponses.append(response)
     bfasResponseTime.append(responseTime)
     bfasAggregate.append(aggregateScore)
     
     win.flip() 
     
#create data frame with responses and associated characteristic\
bfasData = pd.DataFrame({'id' : ids,
                     'charNum' : bfasCharNum,
                     'characteristic' : bfasChar,
                     'response' : bfasResponses, 
                     'responseTime':bfasResponseTime, 
                     'aggregate' : bfasAggregate})
    
#Take the data frame and turn it into a csv file
bfasData.to_csv(file_name, sep = ',', index = False, na_rep = 'na', header = True)

win.close()
core.quit()
